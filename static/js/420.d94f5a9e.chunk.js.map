{"version":3,"file":"static/js/420.d94f5a9e.chunk.js","mappings":"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","sources":["components/notFound/NotFound.jsx","redux/contacts/selectorsContacts.jsx","components/ContactList/ContactList.jsx","components/ContactFilter/FilterContacts.jsx","components/ContactForm/ContactForm.jsx","components/pages/ContactsPage.jsx"],"sourcesContent":[" \nimport React from 'react';\nimport { Box, Button, Container, Typography, Link } from '@mui/material';\nimport Grid from '@mui/material/Grid'; \nimport { useStyles } from 'components/style/Styles';\n\nexport const NotFound = () => {  \n  const classes = useStyles();\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        minHeight: '100vh'\n      }}\n    >\n      <Container maxWidth=\"md\">\n        <Grid container spacing={2}>\n          <Grid xs={6}>\n            <Typography variant=\"h1\"> 404 </Typography>\n            <Typography variant=\"h6\"> The page you're looking for doesn't exist. </Typography>\n              <Link href=\"/\">\n                <Button variant=\"contained\" className={classes.buttonNF}> {\"Home\"} </Button>\n              </Link>\n          </Grid>\n          <Grid xs={6}>\n            <img src='https://img.freepik.com/free-vector/page-found-with-people-connecting-plug-concept-illustration_114360-1939.jpg'              alt=\"\"\n              width={420} height={350}\n            />\n          </Grid>\n        </Grid>\n      </Container>\n    </Box>\n  );\n}\n","import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectFilters = state => state.filters;\nexport const selectError = state => state.contacts.error;\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectFilteredContacts = createSelector(\n    [selectFilters, selectContacts],\n    (filters, contacts) => {\n      return contacts.filter((contact) =>\n        contact.name.toLowerCase().includes(filters.textFilter.toLowerCase())\n      );\n    }\n  );","import * as React from 'react'; \nimport { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux'; \n\nimport { pink } from '@mui/material/colors';\nimport CallOutlinedIcon from '@mui/icons-material/CallOutlined';\nimport DeleteOutlinedIcon from '@mui/icons-material/DeleteOutlined';\nimport EditNoteOutlinedIcon from '@mui/icons-material/EditNoteOutlined';\nimport Button from '@mui/material/Button';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell'; \nimport TableRow from '@mui/material/TableRow';\nimport Avatar from '@mui/material/Avatar';\nimport Typography from '@mui/material/Typography';\nimport TextField from '@mui/material/TextField';  \n\nimport { selectContacts, selectFilteredContacts, selectError, selectIsLoading,} from '../../redux/contacts/selectorsContacts';\nimport { fetchContacts, deleteContact, editContact, } from '../../redux/contacts/operationsContacts';\nimport { NotFound } from '../notFound/NotFound';\nimport { Loader } from '../loader/Loader';\nimport { useStyles } from '../style/Styles';\n\nexport const ContactList = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const filteredContacts = useSelector(selectFilteredContacts);\n  const secondary = pink[500]; // eslint-disable-line no-unused-vars\n\n\n  const [close, setClose] = useState(false);   // eslint-disable-line no-unused-vars\n\n  const [editName, setEditName] = useState('');\n  const [editPhone, setEditPhone] = useState('');\n  const [editId, setEditId] = useState(null);\n  \n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const handleEdit = (contact) => {\n    setEditName(contact.name);\n    setEditPhone(contact.number);\n    setEditId(contact.id);\n  };\n\n  const handleSave = () => {\n    if (editId) {\n      dispatch(editContact({ id: editId, name: editName, number: editPhone }));\n      setEditId(null);\n      setClose(); \n    }\n  }; \n\n const handleRemove = id => {\n    dispatch(deleteContact(id)); \n  };\n\n  if (filteredContacts.length === 0 && !isLoading) {\n    return <NotFound />;\n  }\n  \n  return (\n    <div>\n      {isLoading && <Loader />}\n      {contacts.length === 0 && !error && !isLoading ? (\n      <span>Your agenda is currently empty</span>\n      ) : (\n        <Table className={classes.tabelContact}>\n          <TableBody>\n            {filteredContacts.map(contact => (\n              <TableRow key={contact.id}>\n                <TableCell>\n                  <Avatar sx={{ bgcolor: '#275DBA', }}\n                  />\n                </TableCell>\n                <TableCell>\n                  {editId === contact.id ? (\n                    <TextField\n                      label=\"Name\"\n                      value={editName}\n                      onChange={(e) => setEditName(e.target.value)}\n                      sx={{\n                        \"& input\": {\n                          paddingLeft: '10px',  \n                        },\n                      }}\n                    />\n                  ) : (\n                    <Typography className={classes.nameContact}>\n                      {contact.name\n                        .split(' ')\n                        .map(n => n.charAt(0).toUpperCase() + n.slice(1))\n                        .join(' ')}\n                    </Typography>\n                  )}\n                </TableCell>\n                <TableCell>\n                  {editId === contact.id ? (\n                    <TextField\n                      label=\"Phone\"\n                      value={editPhone}\n                      onChange={(e) => setEditPhone(e.target.value)}\n                      sx={{\n                        \"& input\": {\n                          paddingLeft: '10px', \n                        },\n                      }}\n                    />\n                  ) : (\n                    <span className={classes.phoneContact}>\n                      <CallOutlinedIcon fontSize=\"15px\" style={{ color: '#ccc' }} />\n                      <span className={classes.phoneNumber}>\n                        {contact.number}\n                      </span>\n                    </span>\n                  )}\n                </TableCell>\n                <TableCell>\n                {editId === contact.id ? (\n                <Button variant=\"contained\" color=\"primary\" onClick={handleSave}>\n                  Save\n                </Button>\n              ) : (\n                <>\n                  <Button\n                    variant=\"contained\"\n                    onClick={() => handleEdit(contact)} \n                    className={classes.editButton}\n                    color=\"primary\"\n                  >\n                    <EditNoteOutlinedIcon />\n                  </Button> \n                </>\n              )}\n                  <Button\n                    variant=\"contained\"\n                    className={classes.deleteButton}\n                    color=\"secondary\"                    \n                    onClick={() => {\n                      handleRemove(contact.id);\n                    }}\n                  >\n                    <DeleteOutlinedIcon  />\n                  </Button>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      )}\n    </div>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport TextField from '@mui/material/TextField';\nimport PersonSearchOutlinedIcon from '@mui/icons-material/PersonSearchOutlined';\nimport Grid from '@mui/material/Grid';\n\nimport { selectFilters } from 'redux/contacts/selectorsContacts';\nimport { changeTextFilter } from 'redux/contacts/filtersSlice';\nimport { useStyles } from 'components/style/Styles';\n\nexport const FilterContacts = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const filters = useSelector(selectFilters);\n\n  const handleFilterChange = evt => {\n    const name = evt.target.value;\n    dispatch(changeTextFilter(name));\n  };\n\n  return (\n    <div className={classes.filterForm}>\n      <Grid container spacing={2} alignItems=\"center\">\n        <Grid item>\n          <PersonSearchOutlinedIcon style={{ marginRight: '8px' }} />\n        </Grid>\n        <Grid item xs>\n          <TextField\n            type=\"text\"\n            name=\"filter\"\n            value={filters.textFilter}\n            onChange={handleFilterChange}\n            fullWidth\n            label=\"Find contacts by name\"\n            InputProps={{\n              style: {\n                height: '40px',\n              },\n            }}\n          />\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n","import { useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { TextField, Button, Grid } from '@mui/material';\nimport Box from '@mui/material/Box';\nimport AccountCircle from '@mui/icons-material/AccountCircle';\nimport LocalPhoneIcon from '@mui/icons-material/LocalPhone';\n\nimport { useStyles } from 'components/style/Styles';\nimport { selectContacts } from '../../redux/contacts/selectorsContacts';\nimport { addContact } from '../../redux/contacts/operationsContacts'; \n\nexport const ContactForm = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const nameRef = useRef();\n  const phoneRef = useRef();\n\n  const [nameError, setNameError] = useState('');\n  const [phoneError, setPhoneError] = useState('');\n  const [showErrors, setShowErrors] = useState(false); // eslint-disable-line no-unused-vars\n\n\n  const validateName = name => {\n    if ( /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/.test(name) && name.length > 2) {\n      setNameError('');\n    } else {\n      setNameError('Name should have at least 3 letters');\n    }\n  };\n  const validatePhoneNumber = number => {\n    if (/^07\\d{8}$/.test(number)) {\n      setPhoneError('');\n    } else {\n      setPhoneError('Phone number should start with \"07\" and have 10 digits');\n    }\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const form = evt.currentTarget;\n    const contactName = nameRef.current.value;\n    const contactNumber = phoneRef.current.value;\n    const isDuplicate = contacts.find(\n      contact => contact.name.toLowerCase() === contactName.toLowerCase()\n    ); \n\n    if (isDuplicate) {\n      toast.warn(`${contactName} is already in contacts.`);\n    } else {\n      if (contactName && contactNumber && !nameError && !phoneError) {\n        const contact = {\n          name: contactName,\n          number: contactNumber,\n        }; \n        dispatch(addContact(contact));\n        form.reset();\n      } else {\n        setShowErrors(true);\n      }\n    }\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <Grid container spacing={2}>\n        <Grid item xs={12} md={4}>\n          <div className={classes.formGroup}>\n            <Box className={classes.addBox}>\n              <AccountCircle sx={{ color: 'primary', mr: 1, my: 0.5 }} />\n              <TextField\n                placeholder=\"Name\"\n                variant=\"standard\"\n                inputRef={nameRef}\n                name=\"name\"\n                type=\"text\"\n                required\n                onBlur={e => validateName(e.target.value)}\n              />\n              {nameError && ( <span className={classes.addSpanBox}> {nameError} </span> )}\n            </Box>\n          </div>\n        </Grid>\n        <Grid item xs={12} md={4}>\n          <div className={classes.formGroup}>\n            <Box className={classes.addBox}>\n              <LocalPhoneIcon sx={{ color: 'primary', mr: 1, my: 0.5 }} />\n              <TextField\n                placeholder=\"Phone Number\"\n                variant=\"standard\"\n                type=\"tel\"\n                name=\"number\"\n                inputRef={phoneRef}\n                required\n                onBlur={e => validatePhoneNumber(e.target.value)}\n              />\n              {phoneError && ( <span className={classes.addSpanBox}> {phoneError} </span> )}\n            </Box>\n          </div>\n        </Grid>\n        <Grid item xs={12} md={4}>\n          <div className={classes.formGroup}>\n            <Button variant=\"contained\" color=\"primary\" type=\"submit\"> Add contact </Button>\n          </div>\n        </Grid>\n      </Grid>\n    </form>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux'; \nimport ContactPhoneIcon from '@mui/icons-material/ContactPhone';\nimport { fetchContacts } from 'redux/contacts/operationsContacts';\nimport { ContactList } from '../ContactList/ContactList';\nimport { FilterContacts } from '../ContactFilter/FilterContacts';\nimport { ContactForm } from '../ContactForm/ContactForm'; \nimport { useStyles } from 'components/style/Styles';\n\nconst ContactsPage = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch(); \n   \n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <div className={classes.myAgendadd}>\n        <h1 className={classes.titleAgenda}>\n          <ContactPhoneIcon className={classes.contactIcon} />\n          Your phonebook\n        </h1>\n        <ContactForm />\n      </div>\n      <div className={classes.myAgenda}>\n        <h3 className={classes.subtitleAgenda}>Contacts :</h3>\n        <FilterContacts />\n      </div> \n      <ContactList /> \n    </>\n  );\n};\nexport default ContactsPage;\n"],"names":["NotFound","classes","useStyles","_jsx","Box","sx","display","justifyContent","alignItems","minHeight","children","Container","maxWidth","_jsxs","Grid","container","spacing","xs","Typography","variant","Link","href","Button","className","buttonNF","src","alt","width","height","selectContacts","state","contacts","items","selectFilters","filters","selectError","error","selectIsLoading","isLoading","selectFilteredContacts","createSelector","filter","contact","name","toLowerCase","includes","textFilter","ContactList","dispatch","useDispatch","useSelector","filteredContacts","_useState","pink","useState","_useState2","_slicedToArray","setClose","_useState3","_useState4","editName","setEditName","_useState5","_useState6","editPhone","setEditPhone","_useState7","_useState8","editId","setEditId","useEffect","fetchContacts","handleSave","editContact","id","number","length","Loader","Table","tabelContact","TableBody","map","TableRow","TableCell","Avatar","bgcolor","TextField","label","value","onChange","e","target","paddingLeft","nameContact","split","n","charAt","toUpperCase","slice","join","phoneContact","CallOutlinedIcon","fontSize","style","color","phoneNumber","onClick","_Fragment","handleEdit","editButton","EditNoteOutlinedIcon","deleteButton","deleteContact","DeleteOutlinedIcon","FilterContacts","filterForm","item","PersonSearchOutlinedIcon","marginRight","type","evt","changeTextFilter","fullWidth","InputProps","ContactForm","nameRef","useRef","phoneRef","nameError","setNameError","phoneError","setPhoneError","setShowErrors","onSubmit","preventDefault","form","currentTarget","contactName","current","contactNumber","isDuplicate","find","toast","warn","concat","addContact","reset","md","formGroup","addBox","AccountCircle","mr","my","placeholder","inputRef","required","onBlur","test","addSpanBox","LocalPhoneIcon","myAgendadd","titleAgenda","ContactPhoneIcon","contactIcon","myAgenda","subtitleAgenda"],"sourceRoot":""}